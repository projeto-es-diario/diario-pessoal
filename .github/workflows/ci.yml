name: Full Stack CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      ci: ${{ steps.changes.outputs.ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            ci:
              - '.github/workflows/**'

  backend-test-and-build:
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.ci == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('backend/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests, JaCoCo report, and SonarCloud scan
        working-directory: ./backend
        run: mvn -B verify jacoco:report sonar:sonar
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/target/site/jacoco/jacoco.xml
          flags: backend
          name: backend-coverage

      - name: Build application
        working-directory: ./backend
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  frontend-test-and-build:
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.ci == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --no-sandbox --browsers ChromeHeadless --code-coverage --watch=false
        
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        
      - name: Build project
        working-directory: ./frontend
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  deploy:
    needs: [backend-test-and-build, frontend-test-and-build]
    if: always() && (needs.backend-test-and-build.result == 'success' || needs.backend-test-and-build.result == 'skipped') && (needs.frontend-test-and-build.result == 'success' || needs.frontend-test-and-build.result == 'skipped') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download backend artifact
        if: needs.backend-test-and-build.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./deploy/backend/
          
      - name: Download frontend artifact  
        if: needs.frontend-test-and-build.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./deploy/frontend/
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."